name: Bitcoin Market Report Generator

# ===== IMPORTANT NOTES =====
# 1. NOTE: Twitter/X posting capability has been disabled in this workflow.
#    The content is only displayed in the Twitter-style card on the website.
#
# 2. Required API Keys:
#    - OPENAI_API_KEY: Required for generating the Bitcoin report content
#    - COINMARKETCAP_API_KEY (optional): Additional data source for Bitcoin price
# ===========================

on:
  schedule:
    # Run at 6:00 AM UTC every day
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode with detailed logging'
        required: false
        type: boolean
        default: false
      test_mode:
        description: 'Use test data instead of fetching real data'
        required: false
        type: boolean
        default: false
      force_update:
        description: 'Force update even if no new data'
        required: false
        type: boolean
        default: false

jobs:
  generate-bitcoin-report:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai requests pyyaml pillow
      
      - name: Create directories
        run: |
          mkdir -p .github/tmp
          mkdir -p img/blog
      
      - name: Debug current file structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory structure:"
          find . -type f -name "*.html" | sort
          find . -type f -name "*.py" | sort
          echo "Index.html section containing bitcoin card:"
          grep -A 20 -B 5 "twitter-card-container" index.html || echo "Bitcoin card section not found"
      
      - name: Fetch market data
        env:
          COINMARKETCAP_API_KEY: ${{ secrets.COINMARKETCAP_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DEBUG_MODE: ${{ inputs.debug_mode }}
          TEST_MODE: ${{ inputs.test_mode }}
        run: |
          if [ "$TEST_MODE" = "true" ]; then
            echo "Running in test mode"
            python .github/scripts/fetch_bitcoin_data.py --test
          elif [ "$DEBUG_MODE" = "true" ]; then
            echo "Running in debug mode"
            python .github/scripts/fetch_bitcoin_data.py --debug
          else
            echo "Running in standard mode"
            python .github/scripts/fetch_bitcoin_data.py
          fi
      
      - name: Validate fetched data
        run: |
          if [ -f "$NEWSLETTER_DATA_FILE" ]; then
            echo "✅ Data file exists at: $NEWSLETTER_DATA_FILE"
            
            # Check if valid JSON
            if python -c "import json; data=json.load(open('$NEWSLETTER_DATA_FILE')); print(json.dumps(data, indent=2)[:500])"; then
              echo "✅ Data file contains valid JSON"
              
              # Display key data elements
              echo "Bitcoin Price: $BITCOIN_PRICE"
              echo "Price Change: $BITCOIN_CHANGE"
              
              # Verify required fields exist
              REQUIRED_FIELDS=$(python -c "import json; data=json.load(open('$NEWSLETTER_DATA_FILE')); print(','.join(['price' in data, 'price_change_24h' in data, 'key_points' in data, 'analysis' in data, 'outlook' in data]))")
              if [[ "$REQUIRED_FIELDS" == *"False"* ]]; then
                echo "❌ Missing required fields in data file"
                exit 1
              else
                echo "✅ All required fields present in data file"
              fi
            else
              echo "❌ Data file contains invalid JSON"
              cat "$NEWSLETTER_DATA_FILE" | head -n 20
              exit 1
            fi
          else
            echo "❌ Data file not found at: $NEWSLETTER_DATA_FILE"
            echo "Current directory contents:"
            ls -la .github/tmp/
            exit 1
          fi
      
      - name: Generate Bitcoin report
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DEBUG_MODE: ${{ inputs.debug_mode }}
        run: |
          # Generate the full Bitcoin report
          python .github/scripts/generate_bitcoin_report.py
          
          # Check if the report was created
          if [ -f "blog/$POST_SLUG/index.html" ]; then
            echo "✅ Bitcoin report generated successfully at blog/$POST_SLUG/index.html"
          else
            echo "❌ Failed to generate Bitcoin report"
            exit 1
          fi
      
      - name: Save social content to environment variable (Base64 encoded)
        run: |
          if [ -f ".github/tmp/social_content.txt" ]; then
            # This approach converts the multiline content to a single-line base64 string
            # This avoids any issues with delimiters or multiline environment variables
            ENCODED_CONTENT=$(base64 -w 0 .github/tmp/social_content.txt)
            echo "SOCIAL_CONTENT_B64=$ENCODED_CONTENT" >> $GITHUB_ENV
            echo "Social content saved as base64-encoded environment variable"
            
            # For display purposes, create a plaintext version too
            cp .github/tmp/social_content.txt .github/tmp/social_content_display.txt
          else
            echo "Warning: No social content file found"
          fi
      
      - name: Generate Bitcoin report image
        id: generate-image
        run: |
          python3 - <<EOF
          import os
          from PIL import Image, ImageDraw, ImageFont
          from pathlib import Path
          import textwrap
          import random
          
          # Get the post slug from environment variable
          post_slug = os.environ.get("POST_SLUG")
          post_title = os.environ.get("POST_TITLE")
          
          if not post_slug or not post_title:
              print("Missing required environment variables")
              print(f"POST_SLUG: {post_slug}")
              print(f"POST_TITLE: {post_title}")
              
              # Fallback values
              if not post_slug:
                  import datetime
                  post_slug = f"bitcoin-market-report-{datetime.datetime.now().strftime('%Y-%m-%d')}"
                  print(f"Using fallback POST_SLUG: {post_slug}")
              
              if not post_title:
                  post_title = "Bitcoin Market Analysis"
                  print(f"Using fallback POST_TITLE: {post_title}")
          
          # Create blog image directory if it doesn't exist
          img_dir = Path("img/blog")
          img_dir.mkdir(parents=True, exist_ok=True)
          
          # Define image dimensions
          width, height = 1200, 630
          
          # Bitcoin color scheme
          bg_color = (247, 147, 26)  # Bitcoin Orange
          
          # Create a colored background image
          image = Image.new('RGB', (width, height), bg_color)
          draw = ImageDraw.Draw(image)
          
          # Add Bitcoin symbol patterns
          for i in range(15):
              x = random.randint(0, width)
              y = random.randint(0, height)
              size = random.randint(30, 100)
              
              # Draw Bitcoin symbol (simplified)
              draw.ellipse((x-size/2, y-size/2, x+size/2, y+size/2), 
                          fill=(255, 255, 255, 50))
              
              # Draw vertical line through circle
              draw.rectangle((x-2, y-size/2, x+2, y+size/2), 
                            fill=(255, 255, 255, 50))
              
              # Draw horizontal lines
              draw.rectangle((x-size/2, y-2, x+size/2, y+2), 
                            fill=(255, 255, 255, 50))
              draw.rectangle((x-size/2, y-size/4, x+size/2, y-size/4+4), 
                            fill=(255, 255, 255, 50))
              draw.rectangle((x-size/2, y+size/4-4, x+size/2, y+size/4), 
                            fill=(255, 255, 255, 50))
          
          # Add a semi-transparent overlay for better text visibility
          overlay = Image.new('RGBA', (width, height), (0, 0, 0, 120))
          image.paste(Image.alpha_composite(Image.new('RGBA', image.size, (0, 0, 0, 0)), overlay).convert('RGB'), (0, 0))
          
          # Add title
          draw = ImageDraw.Draw(image)
          
          # Use a default font path that's likely to exist on Ubuntu
          try:
              font_path = "/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf"
              title_font = ImageFont.truetype(font_path, 60)
              subtitle_font = ImageFont.truetype(font_path, 40)
          except IOError:
              # Fallback to default font
              title_font = ImageFont.load_default()
              subtitle_font = ImageFont.load_default()
          
          # Wrap text to fit the image width
          margin = 100
          wrapped_text = textwrap.wrap(post_title, width=30)
          y_position = (height - len(wrapped_text) * 70) // 2
          
          for line in wrapped_text:
              try:
                  text_width = draw.textlength(line, font=title_font)
              except AttributeError:
                  # For older PIL versions
                  text_width = title_font.getsize(line)[0]
              
              position = ((width - text_width) // 2, y_position)
              # Draw a shadow
              draw.text((position[0] + 2, position[1] + 2), line, font=title_font, fill=(0, 0, 0))
              # Draw the text
              draw.text(position, line, font=title_font, fill=(255, 255, 255))
              y_position += 70
          
          # Add date
          import datetime
          today = datetime.datetime.now().strftime("%B %d, %Y")
          date_text = f"Bitcoin Market Report | {today}"
          
          try:
              date_width = draw.textlength(date_text, font=subtitle_font)
          except AttributeError:
              # For older PIL versions
              date_width = subtitle_font.getsize(date_text)[0]
              
          date_position = ((width - date_width) // 2, y_position + 40)
          draw.text(date_position, date_text, font=subtitle_font, fill=(220, 220, 220))
          
          # Save the image
          image_path = img_dir / f"{post_slug}.jpg"
          image.save(image_path)
          
          print(f"Created Bitcoin report image: {image_path}")
          EOF
      
      - name: Examine index.html before update
        run: |
          echo "Twitter card section before update:"
          grep -A 30 -B 5 "twitter-card-container" index.html || echo "Failed to find Twitter card section"
      
      - name: Update Twitter card on homepage
        run: |
          echo "Running card update script..."
          python .github/scripts/update_bitcoin_card.py --debug --data-file $NEWSLETTER_DATA_FILE --report-slug $POST_SLUG
          
          # Verify update
          echo "Index.html section after update:"
          grep -A 30 -B 5 "twitter-card-container" index.html || echo "Failed to find updated Twitter card section"
      
      - name: Update Bitcoin report archive
        run: |
          # Update the Bitcoin report archive page
          if [ -f ".github/scripts/update_bitcoin_archive.py" ]; then
            python .github/scripts/update_bitcoin_archive.py
            echo "Bitcoin report archive updated"
          else
            echo "Archive update script not found, skipping this step"
          fi
      
      - name: Display Social Content (No Twitter Posting)
        run: |
          echo "📈 Bitcoin Update Content (displayed on website only):"
          echo "---------------------------------------------------------"
          if [ -f .github/tmp/social_content_display.txt ]; then
            # Clean up the content before displaying
            cat .github/tmp/social_content_display.txt
          elif [ -f .github/tmp/social_content.txt ]; then
            # Clean up the content before displaying
            cat .github/tmp/social_content.txt
          else
            echo "No social content file found."
          fi
          echo "---------------------------------------------------------"
          echo "Note: This content is displayed in the Twitter-style card on the website."
          echo "Twitter posting functionality has been disabled."
      
      - name: Check for changes
        id: git-check
        run: |
          git diff --quiet index.html || echo "::set-output name=changed::true"
          echo "Changes to index.html: $(git diff --stat index.html)"
          
          # If force_update is set, always proceed
          if [ "${{ inputs.force_update }}" = "true" ]; then
            echo "Force update enabled, proceeding with commit"
            echo "::set-output name=changed::true"
          fi
      
      - name: Commit changes
        if: steps.git-check.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add files that might exist
          if [ -f "img/blog/$POST_SLUG.jpg" ]; then
            git add "img/blog/$POST_SLUG.jpg"
            echo "Added report image"
          fi
          
          if [ -f "blog/$POST_SLUG/index.html" ]; then
            git add "blog/$POST_SLUG/index.html"
            echo "Added report page"
          fi
          
          git add index.html
          echo "Added updated index.html"
          
          # Add archive page if it exists
          if [ -f "blog/bitcoin-report-archive/index.html" ]; then
            git add blog/bitcoin-report-archive/index.html
            echo "Added archive page"
          fi
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          else
            git commit -m "Update Bitcoin market report for $TODAY"
            echo "Changes committed"
          fi
      
      - name: Push changes
        if: steps.git-check.outputs.changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
      
      - name: Send Report to Newsletter (Optional)
        if: ${{ false }}  # Disabled by default
        env:
          BUTTONDOWN_API_KEY: ${{ secrets.BUTTONDOWN_API_KEY }}
        run: |
          if [ -n "$BUTTONDOWN_API_KEY" ]; then
            python .github/scripts/send_to_buttondown.py
            echo "Newsletter sent to Buttondown"
          else
            echo "Buttondown API key not provided, skipping newsletter sending"
          fi 