name: Bitcoin Weekly Newsletter

# ===== IMPORTANT NOTES =====
# 1. NOTE: Twitter/X posting capability has been disabled in this workflow.
#    The content is only displayed in the Twitter-style card on the website.
#
# 2. Required API Keys:
#    - OPENAI_API_KEY: Required for generating the Bitcoin report content
# ===========================

on:
  schedule:
    # Run every Friday at 9:00 AM UTC
    - cron: '0 9 * * 5'
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (no API calls)'
        required: false
        default: false
        type: boolean

jobs:
  generate-bitcoin-report:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai requests pyyaml pillow
      
      - name: Create directories
        run: |
          mkdir -p .github/tmp
          mkdir -p img/blog
      
      - name: Generate sample data if in test mode
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "Running in test mode with sample data"
          echo "#Bitcoin Update:" > .github/tmp/social_content.txt
          echo "Price: \$84,570 (+3.60%)" >> .github/tmp/social_content.txt
          echo "1. Positive regulatory moves & pending SEC Bitcoin ETF decision" >> .github/tmp/social_content.txt
          echo "2. Institutional adoption with Fidelity & BlackRock" >> .github/tmp/social_content.txt
          echo "Outlook: Bullish with support at \$80K & resistance at \$100K. #BTC #Crypto" >> .github/tmp/social_content.txt
          
          POST_SLUG="bitcoin-market-report-$(date +%Y-%m-%d)"
          POST_TITLE="Bitcoin Surges Past \$84K: Institutional Adoption Drives Growth"
          echo "POST_SLUG=$POST_SLUG" >> $GITHUB_ENV
          echo "POST_TITLE=$POST_TITLE" >> $GITHUB_ENV
      
      - name: Generate Bitcoin report with OpenAI
        if: ${{ github.event.inputs.test_mode != 'true' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python .github/scripts/generate_bitcoin_report.py
      
      - name: Save social content to environment variable (Base64 encoded)
        run: |
          if [ -f ".github/tmp/social_content.txt" ]; then
            # This approach converts the multiline content to a single-line base64 string
            # This avoids any issues with delimiters or multiline environment variables
            ENCODED_CONTENT=$(base64 -w 0 .github/tmp/social_content.txt)
            echo "SOCIAL_CONTENT_B64=$ENCODED_CONTENT" >> $GITHUB_ENV
            echo "Social content saved as base64-encoded environment variable"
            
            # For display purposes, create a plaintext version too
            cp .github/tmp/social_content.txt .github/tmp/social_content_display.txt
          else
            echo "Warning: No social content file found"
          fi
      
      - name: Generate Bitcoin report image
        id: generate-image
        run: |
          python3 - <<EOF
          import os
          from PIL import Image, ImageDraw, ImageFont
          from pathlib import Path
          import textwrap
          import random
          
          # Get the post slug from environment variable
          post_slug = os.environ.get("POST_SLUG")
          post_title = os.environ.get("POST_TITLE")
          
          if not post_slug or not post_title:
              print("Missing required environment variables")
              print(f"POST_SLUG: {post_slug}")
              print(f"POST_TITLE: {post_title}")
              
              # Fallback values
              if not post_slug:
                  import datetime
                  post_slug = f"bitcoin-market-report-{datetime.datetime.now().strftime('%Y-%m-%d')}"
                  print(f"Using fallback POST_SLUG: {post_slug}")
              
              if not post_title:
                  post_title = "Bitcoin Market Analysis"
                  print(f"Using fallback POST_TITLE: {post_title}")
          
          # Create blog image directory if it doesn't exist
          img_dir = Path("img/blog")
          img_dir.mkdir(parents=True, exist_ok=True)
          
          # Define image dimensions
          width, height = 1200, 630
          
          # Bitcoin color scheme
          bg_color = (247, 147, 26)  # Bitcoin Orange
          
          # Create a colored background image
          image = Image.new('RGB', (width, height), bg_color)
          draw = ImageDraw.Draw(image)
          
          # Add Bitcoin symbol patterns
          for i in range(15):
              x = random.randint(0, width)
              y = random.randint(0, height)
              size = random.randint(30, 100)
              
              # Draw Bitcoin symbol (simplified)
              draw.ellipse((x-size/2, y-size/2, x+size/2, y+size/2), 
                          fill=(255, 255, 255, 50))
              
              # Draw vertical line through circle
              draw.rectangle((x-2, y-size/2, x+2, y+size/2), 
                            fill=(255, 255, 255, 50))
              
              # Draw horizontal lines
              draw.rectangle((x-size/2, y-2, x+size/2, y+2), 
                            fill=(255, 255, 255, 50))
              draw.rectangle((x-size/2, y-size/4, x+size/2, y-size/4+4), 
                            fill=(255, 255, 255, 50))
              draw.rectangle((x-size/2, y+size/4-4, x+size/2, y+size/4), 
                            fill=(255, 255, 255, 50))
          
          # Add a semi-transparent overlay for better text visibility
          overlay = Image.new('RGBA', (width, height), (0, 0, 0, 120))
          image.paste(Image.alpha_composite(Image.new('RGBA', image.size, (0, 0, 0, 0)), overlay).convert('RGB'), (0, 0))
          
          # Add title
          draw = ImageDraw.Draw(image)
          
          # Use a default font path that's likely to exist on Ubuntu
          try:
              font_path = "/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf"
              title_font = ImageFont.truetype(font_path, 60)
              subtitle_font = ImageFont.truetype(font_path, 40)
          except IOError:
              # Fallback to default font
              title_font = ImageFont.load_default()
              subtitle_font = ImageFont.load_default()
          
          # Wrap text to fit the image width
          margin = 100
          wrapped_text = textwrap.wrap(post_title, width=30)
          y_position = (height - len(wrapped_text) * 70) // 2
          
          for line in wrapped_text:
              try:
                  text_width = draw.textlength(line, font=title_font)
              except AttributeError:
                  # For older PIL versions
                  text_width = title_font.getsize(line)[0]
              
              position = ((width - text_width) // 2, y_position)
              # Draw a shadow
              draw.text((position[0] + 2, position[1] + 2), line, font=title_font, fill=(0, 0, 0))
              # Draw the text
              draw.text(position, line, font=title_font, fill=(255, 255, 255))
              y_position += 70
          
          # Add date
          import datetime
          today = datetime.datetime.now().strftime("%B %d, %Y")
          date_text = f"Bitcoin Market Report | {today}"
          
          try:
              date_width = draw.textlength(date_text, font=subtitle_font)
          except AttributeError:
              # For older PIL versions
              date_width = subtitle_font.getsize(date_text)[0]
              
          date_position = ((width - date_width) // 2, y_position + 40)
          draw.text(date_position, date_text, font=subtitle_font, fill=(220, 220, 220))
          
          # Save the image
          image_path = img_dir / f"{post_slug}.jpg"
          image.save(image_path)
          
          print(f"Created Bitcoin report image: {image_path}")
          EOF
      
      - name: Display Social Content (No Twitter Posting)
        run: |
          echo "ðŸ“ˆ Bitcoin Update Content (displayed on website only):"
          echo "---------------------------------------------------------"
          if [ -f .github/tmp/social_content_display.txt ]; then
            # Clean up the content before displaying
            cat .github/tmp/social_content_display.txt | grep -v "Error:" | grep -v "file command" | grep -v "GITHUB_ENV"
          elif [ -f .github/tmp/social_content.txt ]; then
            # Clean up the content before displaying
            cat .github/tmp/social_content.txt | grep -v "Error:" | grep -v "file command" | grep -v "GITHUB_ENV"
          else
            echo "No social content file found."
          fi
          echo "---------------------------------------------------------"
          echo "Note: This content is displayed in the Twitter-style card on the website."
          echo "Twitter posting functionality has been disabled."
      
      # Debug environment variables
      - name: Debug environment variables
        run: |
          echo "POST_SLUG: ${{ env.POST_SLUG }}"
          echo "POST_TITLE: ${{ env.POST_TITLE }}"
          echo "GITHUB_REPOSITORY: ${{ github.repository }}"
          echo "GITHUB_ACTOR: ${{ github.actor }}"
          
          # Check if base64 encoded social content exists
          if [[ -n "${{ env.SOCIAL_CONTENT_B64 }}" ]]; then
            echo "SOCIAL_CONTENT_B64 is set (showing first 30 chars): ${SOCIAL_CONTENT_B64:0:30}..."
            
            # Decode a portion for verification
            DECODED=$(echo "${{ env.SOCIAL_CONTENT_B64 }}" | base64 --decode 2>/dev/null | head -n 1)
            echo "First line decoded: $DECODED"
          else
            echo "SOCIAL_CONTENT_B64 is not set"
          fi
          
      # Ensure all files are committed
      - name: Commit changes
        run: |
          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Stage the generated files (safely handling potentially missing files)
          if [ -d "blog/" ]; then
            git add blog/ || true
          fi
          
          if [ -d "img/blog/" ]; then
            git add img/blog/ || true
          fi
          
          # Add JSON files only if they exist
          for json_file in .github/tmp/*.json; do
            if [ -f "$json_file" ]; then
              git add "$json_file"
            fi
          done
          
          # Add social content files if they exist
          if [ -f ".github/tmp/social_content.txt" ]; then
            git add .github/tmp/social_content.txt
          fi
          
          if [ -f ".github/tmp/social_content_display.txt" ]; then
            git add .github/tmp/social_content_display.txt
          fi
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Commit the changes
            git commit -m "Add Bitcoin market report for ${{ env.POST_SLUG }}"
            echo "Changes committed successfully"
            
            # Push directly to main branch
            git push origin HEAD:main
            echo "Changes pushed to main branch"
            
            echo "::notice::Bitcoin market report for ${{ env.POST_SLUG }} has been committed directly to main branch"
            echo "::notice::You can send the newsletter by:"
            echo "::notice::1. Going to the Actions tab"
            echo "::notice::2. Selecting the 'Send Newsletter' workflow"
            echo "::notice::3. Running the workflow with the post slug: ${{ env.POST_SLUG }}"
          fi
      
      # Remove the PR creation step since we're directly committing to main
      # - name: Create Pull Request
      #   uses: peter-evans/create-pull-request@v5
      #   with:
      #     token: ${{ github.token }}
      #     commit-message: "Add Bitcoin market report for ${{ env.POST_SLUG }}"
      #     title: "Weekly Bitcoin Market Report"
      #     body: |
      #       This PR contains this week's Bitcoin market report ready for review.
      #       
      #       Please review the content for accuracy and relevance before merging.
      #       
      #       Key points from the report:
      #       - Generated Bitcoin market analysis for the week
      #       - Created both a blog post and website Twitter-style card
      #       - Added Bitcoin market data visualization
      #       
      #       After merging, you can send the newsletter by:
      #       1. Going to the Actions tab
      #       2. Selecting the "Send Newsletter" workflow
      #       3. Running the workflow with the post slug: `${{ env.POST_SLUG }}`
      #     branch: bitcoin-report-update
      #     base: main
      #     delete-branch: true
      #     labels: |
      #       bitcoin-report
      #       content-review 