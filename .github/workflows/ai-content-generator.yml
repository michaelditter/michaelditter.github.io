name: AI Content Generator

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      topic:
        description: 'Topic for AI to write about'
        required: false
        default: 'ai-strategy'

jobs:
  generate-content:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade pillow
          pip install openai python-frontmatter pyyaml requests datetime pillow
      
      - name: Generate AI content
        id: generate-content
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TOPIC: ${{ github.event.inputs.topic }}
        run: |
          python .github/scripts/generate_blog_post.py
      
      - name: Generate placeholder image
        id: generate-image
        run: |
          python3 - <<EOF
          import os
          from PIL import Image, ImageDraw, ImageFont
          from pathlib import Path
          import textwrap
          import random
          
          # Get the post slug from environment variable
          post_slug = os.environ.get("POST_SLUG")
          post_title = os.environ.get("POST_TITLE")
          
          if not post_slug or not post_title:
              print("Missing required environment variables")
              exit(1)
          
          # Create blog image directory if it doesn't exist
          img_dir = Path("img/blog")
          img_dir.mkdir(parents=True, exist_ok=True)
          
          # Define image dimensions
          width, height = 1200, 630
          
          # Background colors for different topics
          bg_colors = {
              "ai-strategy": (0, 82, 61),  # Dark green
              "machine-learning": (20, 52, 164),  # Dark blue
              "ai-ethics": (128, 0, 64),  # Deep purple
              "emerging-tech": (164, 74, 20),  # Rust orange
          }
          
          # Try to detect topic from slug
          topic_color = (0, 82, 61)  # Default to dark green
          for topic, color in bg_colors.items():
              if topic in post_slug:
                  topic_color = color
                  break
          
          # Create a colored background image
          image = Image.new('RGB', (width, height), topic_color)
          draw = ImageDraw.Draw(image)
          
          # Add geometric patterns
          for i in range(20):
              x1 = random.randint(0, width)
              y1 = random.randint(0, height)
              x2 = random.randint(0, width)
              y2 = random.randint(0, height)
              r, g, b = topic_color
              # Slightly lighter version of the background color
              line_color = (min(r + 30, 255), min(g + 30, 255), min(b + 30, 255))
              draw.line((x1, y1, x2, y2), fill=line_color, width=3)
          
          # Add a semi-transparent overlay for better text visibility
          overlay = Image.new('RGBA', (width, height), (0, 0, 0, 100))
          image.paste(Image.alpha_composite(Image.new('RGBA', image.size, (0, 0, 0, 0)), overlay).convert('RGB'), (0, 0))
          
          # Add title
          draw = ImageDraw.Draw(image)
          
          # Add compatibility for textsize method
          def textsize_polyfill(self, text, font=None, spacing=4, direction=None, features=None, language=None, stroke_width=0):
              """Polyfill for the deprecated textsize method."""
              if hasattr(self, 'textbbox'):
                  left, top, right, bottom = self.textbbox((0, 0), text, font, spacing, direction, features, language, stroke_width)
                  return right - left, bottom - top
              elif font is not None and hasattr(font, 'getsize'):
                  return font.getsize(text)
              else:
                  # Last resort fallback
                  return len(text) * (font.size if hasattr(font, 'size') else 10), (font.size if hasattr(font, 'size') else 20)
          
          # Monkey patch the ImageDraw class if textsize is missing
          if not hasattr(ImageDraw.ImageDraw, 'textsize'):
              ImageDraw.ImageDraw.textsize = textsize_polyfill
          
          # Use a default font path that's likely to exist on Ubuntu
          try:
              font_path = "/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf"
              title_font = ImageFont.truetype(font_path, 60)
              subtitle_font = ImageFont.truetype(font_path, 40)
          except IOError:
              # Fallback to default font
              title_font = ImageFont.load_default()
              subtitle_font = ImageFont.load_default()
          
          # Wrap text to fit the image width
          margin = 100
          wrapped_text = textwrap.wrap(post_title, width=30)
          y_position = (height - len(wrapped_text) * 70) // 2
          
          for line in wrapped_text:
              # Use textbbox instead of textsize
              left, top, right, bottom = draw.textbbox((0, 0), line, font=title_font)
              text_width = right - left
              text_height = bottom - top
              position = ((width - text_width) // 2, y_position)
              # Draw a shadow
              draw.text((position[0] + 2, position[1] + 2), line, font=title_font, fill=(0, 0, 0))
              # Draw the text
              draw.text(position, line, font=title_font, fill=(255, 255, 255))
              y_position += text_height + 10
          
          # Add author name
          author_text = "By Michael J Ditter"
          # Use textbbox instead of textsize
          left, top, right, bottom = draw.textbbox((0, 0), author_text, font=subtitle_font)
          author_width = right - left
          author_height = bottom - top
          author_position = ((width - author_width) // 2, y_position + 40)
          draw.text(author_position, author_text, font=subtitle_font, fill=(220, 220, 220))
          
          # Save the image
          image_path = img_dir / f"{post_slug}.jpg"
          image.save(image_path)
          
          print(f"Created placeholder image: {image_path}")
          EOF
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "Add AI-generated blog post"
          title: "Weekly AI-Generated Blog Post"
          body: |
            This PR contains an AI-generated blog post ready for review.
            
            Please review the content for accuracy and relevance before merging.
            
            Generated by the AI Content Generator workflow.
            
            After merging, you can send the newsletter by:
            1. Going to the Actions tab
            2. Selecting the "Send Newsletter" workflow
            3. Running the workflow with the post slug: `${{ env.POST_SLUG }}`
          branch: ai-content-update
          delete-branch: true
          labels: |
            ai-generated
            content-review 